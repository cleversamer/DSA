# Binary Tree:
The Binary tree means that the node can have maximum two children. Here, binary name itself suggests that 'two';
therefore, each node can have either 0, 1 or 2 children. and it is is also one of the data structures that represent
hierarchical data.

# Some factors are considered for choosing the data structure:
1- What type of data needs to be stored:
It might be a possibility that a certain data structure can be the best fit for some kind of data.

2- Cost of operations:
If we want to minimize the cost for the operations for the most frequently performed operations. For example,
we have a simple list on which we have to perform the search operation; then, we can create an array in which
elements are stored in sorted order to perform the binary search. The binary search works very fast for the
simple list as it divides the search space into half.

3- Memory usage:
Sometimes, we want a data structure that utilizes less memory.

# Notes:
* Every item in the tree is a node.
* The node at the top of the tree is the root.
* Every non-root node has one and only one parent.
* A leaf node has no children.
* A singleton tree has only one node - the root.
* Every node has 0, 1, or 2 children.
* Children are referred to as left child and right child.
* In practice, we use binary search trees.
* Can perform insertions, deletions, and retrievals in O(log n) time.
* The left child always has a smaller value than its parent.
* The right child always has a larger value that its parent.
* This means everything to the left of the root is less than the value of the root, and everything to the right of the root is greater than the value of the root.
* Because of that, we can do a binary search.