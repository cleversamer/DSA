- Radix sort algorithm:
Radix sort processes the elements the same way in which the names of the students are sorted according to
their alphabetical order. There are 26 radix in that case due to the fact that, there are 26 alphabets in English.
In the first pass, the names are grouped according to the ascending order of the first letter of names.

In the second pass, the names are grouped according to the ascending order of the second letter. The same process
continues until we find the sorted list of names. The bucket are used to store the names produced in each pass.
The number of passes depends upon the length of the name with the maximum letter.

In the case of integers, radix sort sorts the numbers according to their digits. The comparisons are made among the
digits of the number from LSB to MSB. The number of passes depend upon the length of the number with the most number of digits.

- Complexity:
Complexity	Best Case	Average Case	Worst Case
Time	    Ω(n+k)	    θ(nk)	        O(nk)
Space			                        O(n+k)

- Notes:
1. Makes assumptions about the data.
2. Data must have same radix and width.
3. Because of this, data must be integers or strings.
4. Sort based on each individual digit or letter position.
5. Start at the right-most position.
6. Must use a stable sort algorithm at each stage.
7. Counting sort is often used as the sort algorithm for radix sort - (must be stable counting sort).
8. O(n) - can achieve this because we're making assumptions about the data we're sorting.
9. Even so, it often runs slower than o(n log n) algorithms because of the overhead involved.
10. In-place depends on which sort algorithm you use.
11. Stable algorithm.




















